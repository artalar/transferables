"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const y=Object.getPrototypeOf(Int8Array),T=globalThis.AudioData,b=globalThis.VideoFrame,m=globalThis.OffscreenCanvas,p=globalThis.RTCDataChannel;function A(){const n=(()=>{try{const t={channel:new MessageChannel};structuredClone(t,{transfer:[t.channel.port1,t.channel.port2]})}catch(t){return console.warn(t),!1}return!0})(),i=(()=>{try{const t={readonly:new ReadableStream,writeonly:new WritableStream,tranformonly:new TransformStream};structuredClone(t,{transfer:[t.readonly,t.writeonly,t.tranformonly]})}catch(t){return console.warn(t),!1}return!0})();return{channel:n,streams:i}}function c(n){return typeof n=="object"&&n!==null||typeof n=="function"}function d(n){return n instanceof y||n instanceof DataView}function u(n){return"ReadableStream"in globalThis&&n instanceof ReadableStream||"WritableStream"in globalThis&&n instanceof WritableStream||"TransformStream"in globalThis&&n instanceof TransformStream}function h(n){return"MessageChannel"in globalThis&&n instanceof MessageChannel}function g(n){return"ArrayBuffer"in globalThis&&n instanceof ArrayBuffer||"MessagePort"in globalThis&&n instanceof MessagePort||"AudioData"in globalThis&&n instanceof T||"ImageBitmap"in globalThis&&n instanceof ImageBitmap||"VideoFrame"in globalThis&&n instanceof b||"OffscreenCanvas"in globalThis&&n instanceof m||"RTCDataChannel"in globalThis&&n instanceof p}function S(n){return Array.from(new Set(n))}function C(n,i=!1,t=1e4){const a=new Set([]);let s=[],r=[n];for(;r.length>0&&t>0;){for(let e of r)if(d(e))a.add(e.buffer);else if(g(e))a.add(e);else if(h(e))a.add(e.port1),a.add(e.port2);else if(i&&u(e))a.add(e);else if(!u(e)&&c(e)){const l=Array.isArray(e)?e:Object.values(e),o=l.length;for(let f=0;f<o;f++)s.push(l[f])}r=s,s=[],t--}return Array.from(a)}function*w(n,i=!1,t=1e4){const a=new Set([]);let s=[n],r=[];for(;s.length>0&&t>0;){for(let e of s)if(!a.has(e)){if(d(e)){a.add(e);const{buffer:l}=e;if(a.has(l))continue;yield l,a.add(l)}else if(g(e))yield e,a.add(e);else if(h(e)){if(a.add(e),a.has(e.port1)||a.has(e.port2))continue;yield e.port1,yield e.port2,a.add(e.port1),a.add(e.port2)}else if(i&&u(e))yield e,a.add(e);else if(!u(e)&&c(e)){const l=Array.isArray(e)?e:Object.values(e),o=l.length;for(let f=0;f<o;f++)r.push(l[f])}}s=r,r=[],t--}return a.clear(),s=null,r=null,null}function O(n,i=!1,t=1e4){let a=[n],s=[];for(;a.length>0&&t>0;){for(let r of a){if(d(r))return!0;if(g(r))return!0;if(h(r))return!0;if(i&&u(r))return!0;if(c(r)&&!u(r)){const e=Array.isArray(r)?r:Object.values(r),l=e.length;for(let o=0;o<l;o++)s.push(e[o])}}a=s,s=[],t--}return a=null,s=null,!1}exports.AudioData=T;exports.OffscreenCanvas=m;exports.RTCDataChannel=p;exports.TypedArray=y;exports.VideoFrame=b;exports.filterOutDuplicates=S;exports.getTransferable=w;exports.getTransferables=C;exports.hasTransferables=O;exports.isMessageChannel=h;exports.isObject=c;exports.isStream=u;exports.isSupported=A;exports.isTransferable=g;exports.isTypedArray=d;
