(function(r,d){typeof exports=="object"&&typeof module<"u"?d(exports):typeof define=="function"&&define.amd?define(["exports"],d):(r=typeof globalThis<"u"?globalThis:r||self,d(r.Transferables={}))})(this,function(r){"use strict";const d=Object.getPrototypeOf(Int8Array),b=globalThis.AudioData,m=globalThis.VideoFrame,p=globalThis.OffscreenCanvas,A=globalThis.RTCDataChannel;function S(){const n=(()=>{try{const t={channel:new MessageChannel};structuredClone(t,{transfer:[t.channel.port1,t.channel.port2]})}catch(t){return console.warn(t),!1}return!0})(),o=(()=>{try{const t={readonly:new ReadableStream,writeonly:new WritableStream,tranformonly:new TransformStream};structuredClone(t,{transfer:[t.readonly,t.writeonly,t.tranformonly]})}catch(t){return console.warn(t),!1}return!0})();return{channel:n,streams:o}}function h(n){return typeof n=="object"&&n!==null||typeof n=="function"}function y(n){return n instanceof d||n instanceof DataView}function f(n){return"ReadableStream"in globalThis&&n instanceof ReadableStream||"WritableStream"in globalThis&&n instanceof WritableStream||"TransformStream"in globalThis&&n instanceof TransformStream}function T(n){return"MessageChannel"in globalThis&&n instanceof MessageChannel}function g(n){return"ArrayBuffer"in globalThis&&n instanceof ArrayBuffer||"MessagePort"in globalThis&&n instanceof MessagePort||"AudioData"in globalThis&&n instanceof b||"ImageBitmap"in globalThis&&n instanceof ImageBitmap||"VideoFrame"in globalThis&&n instanceof m||"OffscreenCanvas"in globalThis&&n instanceof p||"RTCDataChannel"in globalThis&&n instanceof A}function C(n){return Array.from(new Set(n))}function w(n,o=!1,t=1e4){const a=new Set([]);let s=[],l=[n];for(;l.length>0&&t>0;){for(let e of l)if(y(e))a.add(e.buffer);else if(g(e))a.add(e);else if(T(e))a.add(e.port1),a.add(e.port2);else if(o&&f(e))a.add(e);else if(!f(e)&&h(e)){const i=Array.isArray(e)?e:Object.values(e),u=i.length;for(let c=0;c<u;c++)s.push(i[c])}l=s,s=[],t--}return Array.from(a)}function*O(n,o=!1,t=1e4){const a=new Set([]);let s=[n],l=[];for(;s.length>0&&t>0;){for(let e of s)if(!a.has(e)){if(y(e)){a.add(e);const{buffer:i}=e;if(a.has(i))continue;yield i,a.add(i)}else if(g(e))yield e,a.add(e);else if(T(e)){if(a.add(e),a.has(e.port1)||a.has(e.port2))continue;yield e.port1,yield e.port2,a.add(e.port1),a.add(e.port2)}else if(o&&f(e))yield e,a.add(e);else if(!f(e)&&h(e)){const i=Array.isArray(e)?e:Object.values(e),u=i.length;for(let c=0;c<u;c++)l.push(i[c])}}s=l,l=[],t--}return a.clear(),s=null,l=null,null}function v(n,o=!1,t=1e4){let a=[n],s=[];for(;a.length>0&&t>0;){for(let l of a){if(y(l))return!0;if(g(l))return!0;if(T(l))return!0;if(o&&f(l))return!0;if(h(l)&&!f(l)){const e=Array.isArray(l)?l:Object.values(l),i=e.length;for(let u=0;u<i;u++)s.push(e[u])}}a=s,s=[],t--}return a=null,s=null,!1}r.AudioData=b,r.OffscreenCanvas=p,r.RTCDataChannel=A,r.TypedArray=d,r.VideoFrame=m,r.filterOutDuplicates=C,r.getTransferable=O,r.getTransferables=w,r.hasTransferables=v,r.isMessageChannel=T,r.isObject=h,r.isStream=f,r.isSupported=S,r.isTransferable=g,r.isTypedArray=y,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
